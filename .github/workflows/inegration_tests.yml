name: CI Terraform Plan

on:
  push:
    branches:
      - main

env:
  TF_VERSION: 1.5.7
  BUCKET_NAME: york-demo-tf-state-bucket-storage-mock

jobs:
  terraform:
    name: Terraform VPC and EC2 Deployment Plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Assume Dev Role and Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::605134473011:role/TerraformDevRole
          role-session-name: GitHubActionsSession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Temp S3 Backend (Temporary)
        run: |
          aws s3 mb s3://"$BUCKET_NAME" --region ${{ secrets.AWS_REGION }}
          # Wait for a few seconds to ensure the bucket is available for the next steps
          sleep 90

      - name: Initialize Terraform (Main)
        working-directory: terraform
        run: terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}" -backend-config="key=terraform.tfstate" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="encrypt=true"

      - name: Validate Terraform Code
        working-directory: terraform
        run: terraform validate

      - name: Plan Terraform Changes Dev
        working-directory: terraform
        run: terraform plan -var-file=dev.tfvars

      - name: Plan Terraform Changes Staging
        working-directory: terraform
        run: terraform plan -var-file=staging.tfvars

      - name: Plan Terraform Changes Prod
        working-directory: terraform
        run: terraform plan -var-file=prod.tfvars

      - name: Cleanup Mock Bucket
        run: |
          # Check if the S3 bucket exists
          BUCKET_EXISTS=$(aws s3api head-bucket --bucket "$BUCKET_NAME" --region ${{ secrets.AWS_REGION }} 2>&1 || true)

          if [[ "$BUCKET_EXISTS" == *"NotFound"* ]]; then
            echo "Mock bucket already cleaned up or never created."
          else
            # Delete all object versions if any exist
            OBJECT_VERSIONS=$(aws s3api list-object-versions --bucket "$BUCKET_NAME" --query "Versions[].[Key,VersionId]" --output text || true)

            if [[ -n "$OBJECT_VERSIONS" && "$OBJECT_VERSIONS" != "None" ]]; then
              echo "$OBJECT_VERSIONS" | while read -r key version_id; do
                if [[ -n "$key" && -n "$version_id" ]]; then
                  echo "Deleting version $version_id of object $key..."
                  aws s3api delete-object --bucket "$BUCKET_NAME" --key "$key" --version-id "$version_id"
                fi
              done
              echo "All object versions deleted."
            else
              echo "No object versions found."
            fi

            # Remove the bucket after deleting objects
            aws s3 rb s3://"$BUCKET_NAME" --force --region ${{ secrets.AWS_REGION }}
            echo "Bucket removed."
          fi
